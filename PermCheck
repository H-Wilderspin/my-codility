  <!-- Is this array a permutation ? 1 : 0 -->
  
  const A = [1, 2, 5, 4, 3]

  function solution(A) {

    const N = A.length

    let seriesTotal = (N * (N + 1)) / 2
    let mySet = new Set()

    for (const i of A) {
      seriesTotal = seriesTotal - i

      if (mySet.has(i)) {
        return 0
      }
      mySet.add(i)
    }

    return seriesTotal === 0 ? 1 : 0
  }

 
 

<!-- Find what the sum of the series would be if it is a permutation -->

    const N = A.length
    let seriesTotal = (N * (N + 1)) / 2

<!-- Iterate through the array and with each swing, deduct i from the series total.

Meanwhile, check for duplicates with set.has and set.add
Trigger the return if you find one

if series total is 0 at the end of the iteration and there were no duplicates, return 1 indicating true -->
